// ============================================================================
//                               QAOA MAX CUT
// ============================================================================
// Author: 	Ryan Dougherty
// UUID:    606085269
// Date: 	3/1/2023
// 
// 
// The following code is a QAOA circuit for the Max Cut problem. The circuit 
// is parameterized by the number of qubits, the number of repetitions, the
// number of edges in the graph, and the graph edges.


// ============================================================================
//                                 PARAMETERS
// ============================================================================

// Number of qubits
n:=6;

// Number of repetitions of the QAOA circuit
n_neps:=1;

// Betas and gammas for each repetition. Note: length of each needs to be n_neps
betas:=[2.72176627];
gammas:=[0.35475932];

// Number of edges in the graph
n_graph_edges:=7;
// Graph edges for Max Cut problem
graph:=[[0, 1], [1, 2], [2, 3], [3, 0], [4, 5], [0, 4], [5,1]];


// ============================================================================
//                              MAX CUT CIRCUIT
// ============================================================================
def QAOA_MaxCut[n:!‚Ñï](const g_edges:!‚Ñï[][],  const betas:!‚Ñù[], const gammas:!‚Ñù[], const reps:!‚Ñï) mfree
{
    // Prepare initial state of |0...0>
    x:=vector(n,0:ùîπ);

    // Hadamard on all qubits
    for i in 0..n 
    {
        x[i]:=H(x[i]);
    }

    val:=0:ùîπ;
    beta:= 2*betas[0];
    gamma:= 2*gammas[0];

    for rep in [0..reps)
    {
        // Apply problem unitary. Tag each neighboring node with a CNOT Z rotation
        for i in [0..n_graph_edges)
        {
            edge:=g_edges[i];
            node1:=edge[0];
            node2:=edge[1];

            // Apply CNOT RZ on x[node2] if x[node1] is 1
            // NOTE: Need to swap x[node1] to a temp register since we cannot consume the state
            (val, x[node1]):=(x[node1], val);
            if val
            {
                x[node2]:=X(x[node2]);
                x[node2]:=rotZ(gamma, x[node2]);
                x[node2]:=X(x[node2]);
            }
            // Swap back
            (x[node1], val):=(val, x[node1]);
        }

        // Apply mixer unitary
        for i in [0..n)
        {
            // Apply Rx for our betas
            x[i]:=rotX(beta, x[i]);
        }
    }

    // Uncompute ancilla quibit
    forget(val=0);

    return x;
}

def main()
{
    // Run and return the state vector from QAOA_MaxCut
    return QAOA_MaxCut[n](graph, betas, gammas, n_neps);
}
